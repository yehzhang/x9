// Generated by x9-assembler
111000000 // set r0, 0
111100000 // set r1, 0
000011000 // add quotient_MSW
000011100 // add quotient_LSW
001000000 // lw r0, DIVISOR_ADDR
111100000 // set r1, 0
011000000 // beq IF_EXIT:
111000000 // set r0, 0
111100000 // set r1, 0
000100000 // add div_MSW
000100100 // add div_LSW
001000001 // lw r0, DIVIDEND_ADDR_MSW
111100111 // set r1, SEVEN
101000010 // srl r0
111100001 // set r1, 1
011000001 // bne FIRST_ELSE:
111100001 // set r1, 1
111000000 // set r0, 0
000101000 // add divident_neg
001000010 // lw r0, DIVIDEND_ADDR_LSW
110000100 // neg r1
001000001 // lw r0, DIVIDEND_ADDR_MSW
110001000 // neg r2
111000001 // set r0, 1
000110100 // add divident_temp_LSW
111000000 // set r0, 0
100001010 // mov r1, r2
000110001 // adc divident_temp_MSW
111000000 // set r0, 0
111100000 // set r1, 0
000101000 // add divident_neg
001000010 // lw r0, DIVIDEND_ADDR_LSW
111100000 // set r1, 0
000110100 // add divident_temp_LSW
001000001 // lw r0, DIVIDEND_ADDR_MSW
000110000 // add divident_temp_MSW
001000000 // lw r0, DIVISOR_ADDR
111100111 // set r1, SEVEN
101000110 // srl r1
111000001 // set r0, 1
011000101 // bne SECOND_ELSE:
111000000 // set r0, 0
111100001 // set r1, 1
000101100 // add divisor_neg
001000000 // lw r0, DIVISOR_ADDR
110000100 // neg r1
111000001 // set r0, 1
000111000 // add divisor_temp
111000000 // set r0, 0
111100000 // set r1, 0
000101100 // add divisor_neg
001100000 // lw r1, DIVISOR_ADDR
111000000 // set r0, 0
000111000 // add divisor_temp
111000000 // set r0, 0
111100001 // set r1, 1
000000010 // sub r0
111100000 // set r1, 0
000111100 // add i
100111100 // mov r0, i
111100001 // set r1, 1
000111100 // add i
111001111 // set r0, FIFTEEN
100111110 // mov r1, i
000010110 // sub temp3
111000000 // set r0, 0
111100000 // set r1, 0
000010000 // add temp2
100110100 // mov r0, divident_temp_LSW
100010110 // mov r1, temp3
101001010 // srl r2
111001000 // set r0, 8
000000110 // sub r1
100110000 // mov r0, divident_temp_MSW
101000100 // sll r1
100001000 // mov r0, r2
110001010 // or r2
100110000 // mov r0, divident_temp_MSW
100010110 // mov r1, temp3
101000001 // sra r0
100001010 // mov r1, r2
111000001 // set r0, 1
110010101 // and temp3
111000000 // set r0, 0
111100000 // set r1, 0
000010000 // add temp2
111000001 // set r0, 1
111100000 // set r1, 0
000001100 // add temp
100100000 // mov r0, div_MSW
100001110 // mov r1, temp
101001000 // sll r2
111001000 // set r0, 8
000000110 // sub r1
100100100 // mov r0, div_LSW
101000110 // srl r1
100001000 // mov r0, r2
110100010 // or div_MSW
100100100 // mov r0, div_LSW
100001110 // mov r1, temp
101100100 // sll div_LSW
100010100 // mov r0, temp3
100100110 // mov r1, div_LSW
000100100 // add div_LSW
111000000 // set r0, 0
100100010 // mov r1, div_MSW
000100001 // adc div_MSW
100100000 // mov r0, div_MSW
111100000 // set r1, 0
011000010 // blts THIRD_ELSE:
100100100 // mov r0, div_LSW
100111010 // mov r1, divisor_temp
011000010 // blts THIRD_ELSE:
111000000 // set r0, 0
111100000 // set r1, 0
000010000 // add temp2
111000000 // set r0, 0
100111010 // mov r1, divisor_temp
011000100 // beq EXTEND_BIT_COMPELET:
011000011 // blt EXTEND_BIT_COMPELET:
111000000 // set r0, 0
110010000 // neg temp2
100111000 // mov r0, divisor_temp
110010100 // neg temp3
100010000 // mov r0, temp2
110010000 // neg temp2
111100001 // set r1, 1
100010100 // mov r0, temp3
000010100 // add temp3
100010000 // mov r0, temp2
111100000 // set r1, 0
000010001 // adc temp2
100100100 // mov r0, div_LSW
100010110 // mov r1, temp3
000100100 // add div_LSW
100100010 // mov r1, div_MSW
100010010 // mov r1, temp2
000100001 // adc div_MSW
111000001 // set r0, 1
111100000 // set r1, 0
000001100 // add r3
100011000 // mov r0, quotient_MSW
100001110 // mov r1, r3
101001000 // sll r2
111001000 // set r0, 8
000000110 // sub r1
100011100 // mov r0, quotient_LSW
101000110 // srl r1
100001000 // mov r0, r2
110011010 // or quotient_MSW
100011100 // mov r0, quotient_LSW
100001110 // mov r1, r3
101011100 // sll quotient_LSW
100011100 // mov r0, quotient_LSW
111100001 // set r1, 1
000011100 // add quotient_LSW
100011000 // mov r0, quotient_MSW
111100000 // set r1, 0
000011001 // adc quotient_MSW
111000000 // set r0, 0
111100000 // set r1, 0
011001000 // beq CHECK_I:
111000001 // set r0, 1
111100000 // set r1, 0
000001100 // add r3
100011000 // mov r0, quotient_MSW
100001110 // mov r1, r3
101001000 // sll r2
111001000 // set r0, 8
000000110 // sub r1
100011100 // mov r0, quotient_LSW
101000110 // srl r1
100001000 // mov r0, r2
110011010 // or quotient_MSW
100011100 // mov r0, quotient_LSW
100001110 // mov r1, r3
101011100 // sll quotient_LSW
111001111 // set r0, FIFTEEN
100111110 // mov r1, i
011001001 // bne FOR_LOOP_START:
100101000 // mov r0, divident_neg
100101110 // mov r1, divisor_neg
011000000 // beq IF_EXIT:
100011100 // mov r0, quotient_LSW
110000100 // neg r1
100011000 // mov r0, quotient_MSW
110001000 // neg r2
111000001 // set r0, 1
000011100 // add quotient_LSW
111000000 // set r0, 0
100001010 // mov r1, r2
000011001 // adc quotient_MSW
100011000 // mov r0, quotient_MSW
100011110 // mov r1, quotient_LSW
010000000 // sw r0, QUOTIENT_RETURN_ADDR_MSW
010100001 // sw r1, QUOTIENT_RETURN_ADDR_LSW
110000011 // halt r0