// Generated by x9-assembler
111_0_00000  // set r0, 0
111_1_00000  // set r1, 0
000_1101_00  // add count
000_1100_00  // add i
001_0_00000  // lw r0, PATTERN_ADDR
000_0111_00  // add pattern
111_0_00100  // set r0, 4
000_1011_00  // add j
111_0_00001  // set r0, 1
111_1_00110  // set r1, 6
101_1001_00  // sll length
111_1_00101  // set r1, 5
101_1111_00  // sll p_string
100_1111_0_0 // mov r0, p_string
000_1010_11  // lwr byte
100_1010_0_0 // mov r0, byte
101_1110_10  // srl slice
100_1010_0_0 // mov r0, byte
100_1011_1_0 // mov r1, j
101_0000_10  // srl r0
111_1_00001  // set r1, 1
110_1000_01  // and bit
100_1110_0_0 // mov r0, slice
101_0000_00  // sll r0
111_1_01111  // set r1, 0b1111
110_0000_01  // and r0
100_1000_1_0 // mov r1, bit
110_1110_10  // or slice
100_1110_0_0 // mov r0, slice
100_0111_1_0 // mov r1, pattern
011_0000_01  // bne failed_to_match:
100_1101_0_0 // mov r0, count
111_1_00001  // set r1, 1
000_1101_00  // add count
100_1101_0_0 // mov r0, count
001_1_00001  // lw r1, MAX_INT_ADDR
011_0000_00  // beq for_exit:
100_1011_0_0 // mov r0, j
111_1_00001  // set r1, 1
000_1011_10  // sub j
111_0_00000  // set r0, 0
100_1011_1_0 // mov r1, j
011_0000_10  // blts inner_for_entry:
011_0001_00  // beq inner_for_entry:
111_1_00111  // set r1, 7
000_1011_00  // add j
100_1100_0_0 // mov r0, i
111_1_00001  // set r1, 1
000_1100_00  // add i
100_1100_0_0 // mov r0, i
100_1111_1_0 // mov r1, p_string
000_0000_00  // add r0
000_1010_11  // lwr byte
100_1100_0_0 // mov r0, i
100_1001_1_0 // mov r1, length
011_0000_11  // blt for_entry:
100_1101_0_0 // mov r0, count
010_0_00000  // sw r0, RETURN_ADDR
110_0000_11  // halt r0