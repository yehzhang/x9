// Generated by x9-assembler
111000000 // set r0, 0
111100000 // set r1, 0
000100000 // add t1
000100100 // add t2
111000100 // set r0, 4
000101000 // add i
001000000 // lw r0, 1
000110100 // add x1
001000001 // lw r0, 2
000111000 // add x2
100111000 // mov r0, x2
100101010 // mov r1, i
101001010 // srl r2
111001000 // set r0, 8
000000110 // sub r1
100110100 // mov r0, x1
101000100 // sll r1
100001000 // mov r0, r2
110111010 // or x2
100110100 // mov r0, x1
100101010 // mov r1, i
101110101 // sra x1
100110100 // mov r0, x1
100111010 // mov r1, x2
010000000 // sw r0, 1
010100001 // sw r1, 2
111100000 // set r1, 0
001000010 // lw r0, 3
000101100 // add y1
001000011 // lw r0, 4
000110000 // add y2
100110000 // mov r0, y2
100101010 // mov r1, i
101001010 // srl r2
111001000 // set r0, 8
000000110 // sub r1
100101100 // mov r0, y1
101000100 // sll r1
100001000 // mov r0, r2
110110010 // or y2
100101100 // mov r0, y1
100101010 // mov r1, i
101101101 // sra y1
100101100 // mov r0, y1
100110010 // mov r1, y2
010000010 // sw r0, 3
010100011 // sw r1, 4
111000000 // set r0, 0
111100000 // set r1, 0
000101000 // add i
100101010 // mov r1, i
111001011 // set r0, 11
011000010 // blts END:
111100000 // set r1, 0
001000000 // lw r0, 1
000110100 // add x1
001000001 // lw r0, 2
000111000 // add x2
001000010 // lw r0, 3
000101100 // add y1
001000011 // lw r0, 4
000110000 // add y2
100101100 // mov r0, y1
111100000 // set r1, 0
011000110 // blts ELSE_ONLY:
000111100 // add r15
011000001 // bne IF_ONLY:
000111100 // add r15
100110000 // mov r0, y2
111100000 // set r1, 0
011000011 // blt ELSE_ONLY:
100110000 // mov r0, y2
100101010 // mov r1, i
101001010 // srl r2
111001000 // set r0, 8
000000110 // sub r1
100101100 // mov r0, y1
101000100 // sll r1
100001000 // mov r0, r2
110001110 // or temp
100101100 // mov r0, y1
100101010 // mov r1, i
101001001 // sra r2
100001100 // mov r0, temp
100111010 // mov r1, x2
000010100 // add x_new2
100001000 // mov r0, r2
100110110 // mov r1, x1
000010001 // adc x_new1
100111000 // mov r0, x2
110000000 // neg r0
111100001 // set r1, 1
000011100 // add temp2
100110100 // mov r0, x1
110000000 // neg r0
111100000 // set r1, 0
000011001 // adc temp1
100011100 // mov r0, temp2
100101010 // mov r1, i
101001010 // srl r2
111001000 // set r0, 8
000000110 // sub r1
100011000 // mov r0, temp1
101000100 // sll r1
100001000 // mov r0, r2
110001110 // or temp
100011000 // mov r0, temp1
100101010 // mov r1, i
101001001 // sra r2
100001100 // mov r0, temp
100110010 // mov r1, y2
000110000 // add y2
100101110 // mov r1, y1
100001000 // mov r0, r2
000101101 // adc y1
111001011 // set r0, 11
100101010 // mov r1, i
000011010 // sub temp1
111000000 // set r0, 0
111100000 // set r1, 0
000011100 // add temp2
111000001 // set r0, 1
000001100 // add temp
100011100 // mov r0, temp2
100011010 // mov r1, temp1
101001000 // sll r2
111001000 // set r0, 8
000000110 // sub r1
100001100 // mov r0, temp
101000110 // srl r1
100001000 // mov r0, r2
110001010 // or r2
100001100 // mov r0, temp
100011010 // mov r1, temp1
101001100 // sll temp
100001100 // mov r0, temp
100100110 // mov r1, t2
000100100 // add t2
100100010 // mov r1, t1
100001000 // mov r0, r2
000100001 // adc t1
111000000 // set r0, 0
111100000 // set r1, 0
011000000 // beq ASSIGN:
100110000 // mov r0, y2
110000000 // neg r0
111100001 // set r1, 1
000011100 // add temp2
100101100 // mov r0, y1
110000000 // neg r0
111100000 // set r1, 0
000011001 // adc temp1
100011100 // mov r0, temp2
100101010 // mov r1, i
101001010 // srl r2
111001000 // set r0, 8
000000110 // sub r1
100011000 // mov r0, temp1
101000100 // sll r1
100001000 // mov r0, r2
110001110 // or temp
100011000 // mov r0, temp1
100101010 // mov r1, i
101001001 // sra r2
100001100 // mov r0, temp
100111010 // mov r1, x2
000010100 // add x_new2
100001000 // mov r0, r2
100110110 // mov r1, x1
000010001 // adc x_new1
100111000 // mov r0, x2
100101010 // mov r1, i
101001010 // srl r2
111001000 // set r0, 8
000000110 // sub r1
100110100 // mov r0, x1
101000100 // sll r1
100001000 // mov r0, r2
110001110 // or temp
100110100 // mov r0, x1
100101010 // mov r1, i
101001001 // sra r2
100001100 // mov r0, temp
100110010 // mov r1, y2
000110000 // add y2
100001000 // mov r0, r2
100101110 // mov r1, y1
000101101 // adc y1
111001011 // set r0, 11
100101010 // mov r1, i
000011010 // sub temp1
111000000 // set r0, 0
111100000 // set r1, 0
000011100 // add temp2
111100001 // set r1, 1
000001100 // add temp
100011100 // mov r0, temp2
100011010 // mov r1, temp1
101001000 // sll r2
111001000 // set r0, 8
000000110 // sub r1
100001100 // mov r0, temp
101000110 // srl r1
100001000 // mov r0, r2
110001010 // or r2
100001100 // mov r0, temp
100011010 // mov r1, temp1
101000000 // sll r0
110000000 // neg r0
111100001 // set r1, 1
000011100 // add temp2
100001000 // mov r0, r2
110000000 // neg r0
111100000 // set r1, 0
000011001 // adc temp1
100100100 // mov r0, t2
100011110 // mov r1, temp2
000100100 // add t2
100100000 // mov r0, t1
100011010 // mov r1, temp1
000100001 // adc t1
111000001 // set r0, 1
100101010 // mov r1, i
000101000 // add i
100010000 // mov r0, x_new1
100010110 // mov r1, x_new2
010000000 // sw r0, 1
010100001 // sw r1, 2
100101100 // mov r0, y1
100110010 // mov r1, y2
010000010 // sw r0, 3
010100011 // sw r1, 4
000111100 // add r15
111000000 // set r0, 0
111100000 // set r1, 0
011000100 // beq FORLOOP:
111000000 // set r0, 0
111100100 // set r1, 4
000101000 // add i
111100000 // set r1, 0
001000000 // lw r0, 1
000110100 // add x1
001000001 // lw r0, 2
000111000 // add x2
100110100 // mov r0, x1
100101010 // mov r1, i
101001000 // sll r2
111001000 // set r0, 8
000000110 // sub r1
100111000 // mov r0, x2
101000110 // srl r1
100001000 // mov r0, r2
110110110 // or x1
100111000 // mov r0, x2
100101010 // mov r1, i
101111000 // sll x2
100110100 // mov r0, x1
100111010 // mov r1, x2
010000100 // sw r0, 5
010100101 // sw r1, 6
100100000 // mov r0, t1
100101010 // mov r1, i
101001000 // sll r2
111001000 // set r0, 8
000000110 // sub r1
100100100 // mov r0, t2
101000110 // srl r1
100001000 // mov r0, r2
110100010 // or t1
100100100 // mov r0, t2
100101010 // mov r1, i
101100100 // sll t2
100100000 // mov r0, t1
100100110 // mov r1, t2
010000110 // sw r0, 7
010100111 // sw r1, 8
000111100 // add r15
110000011 // halt r0